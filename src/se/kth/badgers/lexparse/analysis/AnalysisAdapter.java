/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.kth.badgers.lexparse.analysis;

import java.util.*;
import se.kth.badgers.lexparse.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMainClass(AMainClass node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMainMethodDecl(AMainMethodDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMainMethodBody(AMainMethodBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassDecl(AClassDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarDecl(AVarDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodDecl(AMethodDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArg(AArg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleArgList(ASingleArgList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASequenceArgList(ASequenceArgList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgListRest(AArgListRest node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntArrayType(AIntArrayType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassType(AClassType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABodyStmt(ABodyStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrintlnStmt(APrintlnStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignStmt(AAssignStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayAssignStmt(AArrayAssignStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpExprExpr(AOpExprExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayDerefExpr(AArrayDerefExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayLengthExpr(AArrayLengthExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodCallExpr(AMethodCallExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntLitExpr(AIntLitExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueExpr(ATrueExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseExpr(AFalseExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableExpr(AVariableExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThisExpr(AThisExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANewIntArrayExpr(ANewIntArrayExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANewExprExpr(ANewExprExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalNotExpr(ALogicalNotExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParensExpr(AParensExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndOp(AAndOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessThanOp(ALessThanOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusOp(APlusOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusOp(AMinusOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultOp(AMultOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleExprList(ASingleExprList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASequenceExprList(ASequenceExprList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprRest(AExprRest node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTClassToken(TClassToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPublic(TPublic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStatic(TStatic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVoid(TVoid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrintln(TPrintln node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThis(TThis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLessThan(TLessThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLogicalNot(TLogicalNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemiColon(TSemiColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStarComment(TStarComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntLiteral(TIntLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLongLiteral(TLongLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
