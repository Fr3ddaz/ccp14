/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.kth.badgers.lexparse.analysis;

import se.kth.badgers.lexparse.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAMainClass(AMainClass node);
    void caseAMainMethodDecl(AMainMethodDecl node);
    void caseAMainMethodBody(AMainMethodBody node);
    void caseAClassDecl(AClassDecl node);
    void caseAVarDecl(AVarDecl node);
    void caseAMethodDecl(AMethodDecl node);
    void caseAArg(AArg node);
    void caseASingleArgList(ASingleArgList node);
    void caseASequenceArgList(ASequenceArgList node);
    void caseAArgListRest(AArgListRest node);
    void caseAIntArrayType(AIntArrayType node);
    void caseABooleanType(ABooleanType node);
    void caseAIntType(AIntType node);
    void caseAClassType(AClassType node);
    void caseABodyStmt(ABodyStmt node);
    void caseAIfStmt(AIfStmt node);
    void caseAWhileStmt(AWhileStmt node);
    void caseAPrintlnStmt(APrintlnStmt node);
    void caseAAssignStmt(AAssignStmt node);
    void caseAArrayAssignStmt(AArrayAssignStmt node);
    void caseAExprExpr(AExprExpr node);
    void caseAAndExprAndExpr(AAndExprAndExpr node);
    void caseAAndExprRestAndExprRest(AAndExprRestAndExprRest node);
    void caseALessThanExprLessThanExpr(ALessThanExprLessThanExpr node);
    void caseALessThanExprRestLessThanExprRest(ALessThanExprRestLessThanExprRest node);
    void caseAAdditiveExprAdditiveExpr(AAdditiveExprAdditiveExpr node);
    void caseAAdditiveExprRestAdditiveExprRest(AAdditiveExprRestAdditiveExprRest node);
    void caseAAdditiveExprRest(AAdditiveExprRest node);
    void caseAPlusExprPlusExpr(APlusExprPlusExpr node);
    void caseAMinusExprMinusExpr(AMinusExprMinusExpr node);
    void caseATimesExprTimesExpr(ATimesExprTimesExpr node);
    void caseATimesExprRestTimesExprRest(ATimesExprRestTimesExprRest node);
    void caseAPrefixExprPrefixExpr(APrefixExprPrefixExpr node);
    void caseAPrefixExpr(APrefixExpr node);
    void caseANotExprNotExpr(ANotExprNotExpr node);
    void caseAPostfixExprPostfixExpr(APostfixExprPostfixExpr node);
    void caseAArrayDerefExprPostfixExprRest(AArrayDerefExprPostfixExprRest node);
    void caseAMethodInvocationPostfixExprRest(AMethodInvocationPostfixExprRest node);
    void caseAArrayLengthPostfixExprRest(AArrayLengthPostfixExprRest node);
    void caseAIntLitPrimaryExpr(AIntLitPrimaryExpr node);
    void caseATruePrimaryExpr(ATruePrimaryExpr node);
    void caseAFalsePrimaryExpr(AFalsePrimaryExpr node);
    void caseAVariablePrimaryExpr(AVariablePrimaryExpr node);
    void caseAThisPrimaryExpr(AThisPrimaryExpr node);
    void caseAParenPrimaryExpr(AParenPrimaryExpr node);
    void caseAArrayConstructPrimaryExpr(AArrayConstructPrimaryExpr node);
    void caseAConstructPrimaryExpr(AConstructPrimaryExpr node);
    void caseAAndOp(AAndOp node);
    void caseALessThanOp(ALessThanOp node);
    void caseAPlusOp(APlusOp node);
    void caseAMinusOp(AMinusOp node);
    void caseAMultOp(AMultOp node);
    void caseASingleExprList(ASingleExprList node);
    void caseASequenceExprList(ASequenceExprList node);
    void caseAExprRest(AExprRest node);

    void caseTClassToken(TClassToken node);
    void caseTPublic(TPublic node);
    void caseTStatic(TStatic node);
    void caseTVoid(TVoid node);
    void caseTReturn(TReturn node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTPrintln(TPrintln node);
    void caseTThis(TThis node);
    void caseTNew(TNew node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTString(TString node);
    void caseTInt(TInt node);
    void caseTBoolean(TBoolean node);
    void caseTNumber(TNumber node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTStar(TStar node);
    void caseTMod(TMod node);
    void caseTAnd(TAnd node);
    void caseTLessThan(TLessThan node);
    void caseTLogicalNot(TLogicalNot node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTDot(TDot node);
    void caseTComma(TComma node);
    void caseTSemiColon(TSemiColon node);
    void caseTAssign(TAssign node);
    void caseTBlank(TBlank node);
    void caseTStarComment(TStarComment node);
    void caseTLineComment(TLineComment node);
    void caseTId(TId node);
    void caseTIntLiteral(TIntLiteral node);
    void caseTLongLiteral(TLongLiteral node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
