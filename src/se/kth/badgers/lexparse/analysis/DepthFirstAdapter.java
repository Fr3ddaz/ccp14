/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.kth.badgers.lexparse.analysis;

import java.util.*;
import se.kth.badgers.lexparse.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getMainClass() != null)
        {
            node.getMainClass().apply(this);
        }
        {
            List<PClassDecl> copy = new ArrayList<PClassDecl>(node.getClassDecl());
            for(PClassDecl e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inAMainClass(AMainClass node)
    {
        defaultIn(node);
    }

    public void outAMainClass(AMainClass node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMainClass(AMainClass node)
    {
        inAMainClass(node);
        if(node.getClassToken() != null)
        {
            node.getClassToken().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getMainMethodDecl() != null)
        {
            node.getMainMethodDecl().apply(this);
        }
        if(node.getMainMethodBody() != null)
        {
            node.getMainMethodBody().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAMainClass(node);
    }

    public void inAMainMethodDecl(AMainMethodDecl node)
    {
        defaultIn(node);
    }

    public void outAMainMethodDecl(AMainMethodDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMainMethodDecl(AMainMethodDecl node)
    {
        inAMainMethodDecl(node);
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        if(node.getStatic() != null)
        {
            node.getStatic().apply(this);
        }
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        if(node.getMain() != null)
        {
            node.getMain().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMainMethodDecl(node);
    }

    public void inAMainMethodBody(AMainMethodBody node)
    {
        defaultIn(node);
    }

    public void outAMainMethodBody(AMainMethodBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMainMethodBody(AMainMethodBody node)
    {
        inAMainMethodBody(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PVarDecl> copy = new ArrayList<PVarDecl>(node.getVarDecl());
            for(PVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAMainMethodBody(node);
    }

    public void inAClassDecl(AClassDecl node)
    {
        defaultIn(node);
    }

    public void outAClassDecl(AClassDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDecl(AClassDecl node)
    {
        inAClassDecl(node);
        if(node.getClassToken() != null)
        {
            node.getClassToken().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PVarDecl> copy = new ArrayList<PVarDecl>(node.getVarDecl());
            for(PVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PMethodDecl> copy = new ArrayList<PMethodDecl>(node.getMethodDecl());
            for(PMethodDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAClassDecl(node);
    }

    public void inAVarDecl(AVarDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDecl(AVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecl(AVarDecl node)
    {
        inAVarDecl(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getSemiColon() != null)
        {
            node.getSemiColon().apply(this);
        }
        outAVarDecl(node);
    }

    public void inAMethodDecl(AMethodDecl node)
    {
        defaultIn(node);
    }

    public void outAMethodDecl(AMethodDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDecl(AMethodDecl node)
    {
        inAMethodDecl(node);
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgList() != null)
        {
            node.getArgList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PVarDecl> copy = new ArrayList<PVarDecl>(node.getVarDecl());
            for(PVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemiColon() != null)
        {
            node.getSemiColon().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAMethodDecl(node);
    }

    public void inAArg(AArg node)
    {
        defaultIn(node);
    }

    public void outAArg(AArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArg(AArg node)
    {
        inAArg(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArg(node);
    }

    public void inASingleArgList(ASingleArgList node)
    {
        defaultIn(node);
    }

    public void outASingleArgList(ASingleArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleArgList(ASingleArgList node)
    {
        inASingleArgList(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outASingleArgList(node);
    }

    public void inASequenceArgList(ASequenceArgList node)
    {
        defaultIn(node);
    }

    public void outASequenceArgList(ASequenceArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenceArgList(ASequenceArgList node)
    {
        inASequenceArgList(node);
        {
            List<PArgListRest> copy = new ArrayList<PArgListRest>(node.getArgListRest());
            for(PArgListRest e : copy)
            {
                e.apply(this);
            }
        }
        outASequenceArgList(node);
    }

    public void inAArgListRest(AArgListRest node)
    {
        defaultIn(node);
    }

    public void outAArgListRest(AArgListRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgListRest(AArgListRest node)
    {
        inAArgListRest(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAArgListRest(node);
    }

    public void inAIntArrayType(AIntArrayType node)
    {
        defaultIn(node);
    }

    public void outAIntArrayType(AIntArrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntArrayType(AIntArrayType node)
    {
        inAIntArrayType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAIntArrayType(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanType(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inAClassType(AClassType node)
    {
        defaultIn(node);
    }

    public void outAClassType(AClassType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassType(AClassType node)
    {
        inAClassType(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAClassType(node);
    }

    public void inABodyStmt(ABodyStmt node)
    {
        defaultIn(node);
    }

    public void outABodyStmt(ABodyStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABodyStmt(ABodyStmt node)
    {
        inABodyStmt(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outABodyStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getElseBody() != null)
        {
            node.getElseBody().apply(this);
        }
        outAIfStmt(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAWhileStmt(node);
    }

    public void inAPrintlnStmt(APrintlnStmt node)
    {
        defaultIn(node);
    }

    public void outAPrintlnStmt(APrintlnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintlnStmt(APrintlnStmt node)
    {
        inAPrintlnStmt(node);
        if(node.getPrintln() != null)
        {
            node.getPrintln().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemiColon() != null)
        {
            node.getSemiColon().apply(this);
        }
        outAPrintlnStmt(node);
    }

    public void inAAssignStmt(AAssignStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignStmt(AAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmt(AAssignStmt node)
    {
        inAAssignStmt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemiColon() != null)
        {
            node.getSemiColon().apply(this);
        }
        outAAssignStmt(node);
    }

    public void inAArrayAssignStmt(AArrayAssignStmt node)
    {
        defaultIn(node);
    }

    public void outAArrayAssignStmt(AArrayAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayAssignStmt(AArrayAssignStmt node)
    {
        inAArrayAssignStmt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getIndex() != null)
        {
            node.getIndex().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getSemiColon() != null)
        {
            node.getSemiColon().apply(this);
        }
        outAArrayAssignStmt(node);
    }

    public void inAOpExprExpr(AOpExprExpr node)
    {
        defaultIn(node);
    }

    public void outAOpExprExpr(AOpExprExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpExprExpr(AOpExprExpr node)
    {
        inAOpExprExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOpExprExpr(node);
    }

    public void inAArrayDerefExpr(AArrayDerefExpr node)
    {
        defaultIn(node);
    }

    public void outAArrayDerefExpr(AArrayDerefExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayDerefExpr(AArrayDerefExpr node)
    {
        inAArrayDerefExpr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAArrayDerefExpr(node);
    }

    public void inAArrayLengthExpr(AArrayLengthExpr node)
    {
        defaultIn(node);
    }

    public void outAArrayLengthExpr(AArrayLengthExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayLengthExpr(AArrayLengthExpr node)
    {
        inAArrayLengthExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getLength() != null)
        {
            node.getLength().apply(this);
        }
        outAArrayLengthExpr(node);
    }

    public void inAMethodCallExpr(AMethodCallExpr node)
    {
        defaultIn(node);
    }

    public void outAMethodCallExpr(AMethodCallExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallExpr(AMethodCallExpr node)
    {
        inAMethodCallExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExprList() != null)
        {
            node.getExprList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMethodCallExpr(node);
    }

    public void inAIntLitExpr(AIntLitExpr node)
    {
        defaultIn(node);
    }

    public void outAIntLitExpr(AIntLitExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntLitExpr(AIntLitExpr node)
    {
        inAIntLitExpr(node);
        if(node.getIntLiteral() != null)
        {
            node.getIntLiteral().apply(this);
        }
        outAIntLitExpr(node);
    }

    public void inATrueExpr(ATrueExpr node)
    {
        defaultIn(node);
    }

    public void outATrueExpr(ATrueExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExpr(ATrueExpr node)
    {
        inATrueExpr(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueExpr(node);
    }

    public void inAFalseExpr(AFalseExpr node)
    {
        defaultIn(node);
    }

    public void outAFalseExpr(AFalseExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExpr(AFalseExpr node)
    {
        inAFalseExpr(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseExpr(node);
    }

    public void inAVariableExpr(AVariableExpr node)
    {
        defaultIn(node);
    }

    public void outAVariableExpr(AVariableExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableExpr(AVariableExpr node)
    {
        inAVariableExpr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVariableExpr(node);
    }

    public void inAThisExpr(AThisExpr node)
    {
        defaultIn(node);
    }

    public void outAThisExpr(AThisExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThisExpr(AThisExpr node)
    {
        inAThisExpr(node);
        if(node.getThis() != null)
        {
            node.getThis().apply(this);
        }
        outAThisExpr(node);
    }

    public void inANewIntArrayExpr(ANewIntArrayExpr node)
    {
        defaultIn(node);
    }

    public void outANewIntArrayExpr(ANewIntArrayExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewIntArrayExpr(ANewIntArrayExpr node)
    {
        inANewIntArrayExpr(node);
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outANewIntArrayExpr(node);
    }

    public void inANewExprExpr(ANewExprExpr node)
    {
        defaultIn(node);
    }

    public void outANewExprExpr(ANewExprExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewExprExpr(ANewExprExpr node)
    {
        inANewExprExpr(node);
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outANewExprExpr(node);
    }

    public void inALogicalNotExpr(ALogicalNotExpr node)
    {
        defaultIn(node);
    }

    public void outALogicalNotExpr(ALogicalNotExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalNotExpr(ALogicalNotExpr node)
    {
        inALogicalNotExpr(node);
        if(node.getLogicalNot() != null)
        {
            node.getLogicalNot().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outALogicalNotExpr(node);
    }

    public void inAParensExpr(AParensExpr node)
    {
        defaultIn(node);
    }

    public void outAParensExpr(AParensExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParensExpr(AParensExpr node)
    {
        inAParensExpr(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParensExpr(node);
    }

    public void inAAndOp(AAndOp node)
    {
        defaultIn(node);
    }

    public void outAAndOp(AAndOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndOp(AAndOp node)
    {
        inAAndOp(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndOp(node);
    }

    public void inALessThanOp(ALessThanOp node)
    {
        defaultIn(node);
    }

    public void outALessThanOp(ALessThanOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanOp(ALessThanOp node)
    {
        inALessThanOp(node);
        if(node.getLessThan() != null)
        {
            node.getLessThan().apply(this);
        }
        outALessThanOp(node);
    }

    public void inAPlusOp(APlusOp node)
    {
        defaultIn(node);
    }

    public void outAPlusOp(APlusOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusOp(APlusOp node)
    {
        inAPlusOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusOp(node);
    }

    public void inAMinusOp(AMinusOp node)
    {
        defaultIn(node);
    }

    public void outAMinusOp(AMinusOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusOp(AMinusOp node)
    {
        inAMinusOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusOp(node);
    }

    public void inAMultOp(AMultOp node)
    {
        defaultIn(node);
    }

    public void outAMultOp(AMultOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultOp(AMultOp node)
    {
        inAMultOp(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAMultOp(node);
    }

    public void inASingleExprList(ASingleExprList node)
    {
        defaultIn(node);
    }

    public void outASingleExprList(ASingleExprList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleExprList(ASingleExprList node)
    {
        inASingleExprList(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outASingleExprList(node);
    }

    public void inASequenceExprList(ASequenceExprList node)
    {
        defaultIn(node);
    }

    public void outASequenceExprList(ASequenceExprList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenceExprList(ASequenceExprList node)
    {
        inASequenceExprList(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        {
            List<PExprRest> copy = new ArrayList<PExprRest>(node.getExprRest());
            for(PExprRest e : copy)
            {
                e.apply(this);
            }
        }
        outASequenceExprList(node);
    }

    public void inAExprRest(AExprRest node)
    {
        defaultIn(node);
    }

    public void outAExprRest(AExprRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprRest(AExprRest node)
    {
        inAExprRest(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprRest(node);
    }
}
