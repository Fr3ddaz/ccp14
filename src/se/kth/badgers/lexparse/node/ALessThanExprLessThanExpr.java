/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.kth.badgers.lexparse.node;

import java.util.*;
import se.kth.badgers.lexparse.analysis.*;

@SuppressWarnings("nls")
public final class ALessThanExprLessThanExpr extends PLessThanExpr
{
    private PAdditiveExpr _additiveExpr_;
    private final LinkedList<PLessThanExprRest> _lessThanExprRest_ = new LinkedList<PLessThanExprRest>();

    public ALessThanExprLessThanExpr()
    {
        // Constructor
    }

    public ALessThanExprLessThanExpr(
        @SuppressWarnings("hiding") PAdditiveExpr _additiveExpr_,
        @SuppressWarnings("hiding") List<?> _lessThanExprRest_)
    {
        // Constructor
        setAdditiveExpr(_additiveExpr_);

        setLessThanExprRest(_lessThanExprRest_);

    }

    @Override
    public Object clone()
    {
        return new ALessThanExprLessThanExpr(
            cloneNode(this._additiveExpr_),
            cloneList(this._lessThanExprRest_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALessThanExprLessThanExpr(this);
    }

    public PAdditiveExpr getAdditiveExpr()
    {
        return this._additiveExpr_;
    }

    public void setAdditiveExpr(PAdditiveExpr node)
    {
        if(this._additiveExpr_ != null)
        {
            this._additiveExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._additiveExpr_ = node;
    }

    public LinkedList<PLessThanExprRest> getLessThanExprRest()
    {
        return this._lessThanExprRest_;
    }

    public void setLessThanExprRest(List<?> list)
    {
        for(PLessThanExprRest e : this._lessThanExprRest_)
        {
            e.parent(null);
        }
        this._lessThanExprRest_.clear();

        for(Object obj_e : list)
        {
            PLessThanExprRest e = (PLessThanExprRest) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._lessThanExprRest_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._additiveExpr_)
            + toString(this._lessThanExprRest_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._additiveExpr_ == child)
        {
            this._additiveExpr_ = null;
            return;
        }

        if(this._lessThanExprRest_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._additiveExpr_ == oldChild)
        {
            setAdditiveExpr((PAdditiveExpr) newChild);
            return;
        }

        for(ListIterator<PLessThanExprRest> i = this._lessThanExprRest_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PLessThanExprRest) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
