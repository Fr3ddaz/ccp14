/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.kth.badgers.lexparse.node;

import se.kth.badgers.lexparse.analysis.*;

@SuppressWarnings("nls")
public final class APrefixExprPrefixExpr extends PPrefixExpr
{
    private PNotExpr _notExpr_;

    public APrefixExprPrefixExpr()
    {
        // Constructor
    }

    public APrefixExprPrefixExpr(
        @SuppressWarnings("hiding") PNotExpr _notExpr_)
    {
        // Constructor
        setNotExpr(_notExpr_);

    }

    @Override
    public Object clone()
    {
        return new APrefixExprPrefixExpr(
            cloneNode(this._notExpr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPrefixExprPrefixExpr(this);
    }

    public PNotExpr getNotExpr()
    {
        return this._notExpr_;
    }

    public void setNotExpr(PNotExpr node)
    {
        if(this._notExpr_ != null)
        {
            this._notExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._notExpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._notExpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._notExpr_ == child)
        {
            this._notExpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._notExpr_ == oldChild)
        {
            setNotExpr((PNotExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
