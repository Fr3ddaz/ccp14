/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.kth.badgers.lexparse.node;

import java.util.*;
import se.kth.badgers.lexparse.analysis.*;

@SuppressWarnings("nls")
public final class AAdditiveExprAdditiveExpr extends PAdditiveExpr
{
    private PTimesExpr _timesExpr_;
    private final LinkedList<PAdditiveExprRest> _additiveExprRest_ = new LinkedList<PAdditiveExprRest>();

    public AAdditiveExprAdditiveExpr()
    {
        // Constructor
    }

    public AAdditiveExprAdditiveExpr(
        @SuppressWarnings("hiding") PTimesExpr _timesExpr_,
        @SuppressWarnings("hiding") List<?> _additiveExprRest_)
    {
        // Constructor
        setTimesExpr(_timesExpr_);

        setAdditiveExprRest(_additiveExprRest_);

    }

    @Override
    public Object clone()
    {
        return new AAdditiveExprAdditiveExpr(
            cloneNode(this._timesExpr_),
            cloneList(this._additiveExprRest_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAdditiveExprAdditiveExpr(this);
    }

    public PTimesExpr getTimesExpr()
    {
        return this._timesExpr_;
    }

    public void setTimesExpr(PTimesExpr node)
    {
        if(this._timesExpr_ != null)
        {
            this._timesExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._timesExpr_ = node;
    }

    public LinkedList<PAdditiveExprRest> getAdditiveExprRest()
    {
        return this._additiveExprRest_;
    }

    public void setAdditiveExprRest(List<?> list)
    {
        for(PAdditiveExprRest e : this._additiveExprRest_)
        {
            e.parent(null);
        }
        this._additiveExprRest_.clear();

        for(Object obj_e : list)
        {
            PAdditiveExprRest e = (PAdditiveExprRest) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._additiveExprRest_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._timesExpr_)
            + toString(this._additiveExprRest_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._timesExpr_ == child)
        {
            this._timesExpr_ = null;
            return;
        }

        if(this._additiveExprRest_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._timesExpr_ == oldChild)
        {
            setTimesExpr((PTimesExpr) newChild);
            return;
        }

        for(ListIterator<PAdditiveExprRest> i = this._additiveExprRest_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAdditiveExprRest) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
