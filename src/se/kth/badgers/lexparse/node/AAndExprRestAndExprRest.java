/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.kth.badgers.lexparse.node;

import se.kth.badgers.lexparse.analysis.*;

@SuppressWarnings("nls")
public final class AAndExprRestAndExprRest extends PAndExprRest
{
    private TAnd _and_;
    private PLessThanExpr _lessThanExpr_;

    public AAndExprRestAndExprRest()
    {
        // Constructor
    }

    public AAndExprRestAndExprRest(
        @SuppressWarnings("hiding") TAnd _and_,
        @SuppressWarnings("hiding") PLessThanExpr _lessThanExpr_)
    {
        // Constructor
        setAnd(_and_);

        setLessThanExpr(_lessThanExpr_);

    }

    @Override
    public Object clone()
    {
        return new AAndExprRestAndExprRest(
            cloneNode(this._and_),
            cloneNode(this._lessThanExpr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndExprRestAndExprRest(this);
    }

    public TAnd getAnd()
    {
        return this._and_;
    }

    public void setAnd(TAnd node)
    {
        if(this._and_ != null)
        {
            this._and_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._and_ = node;
    }

    public PLessThanExpr getLessThanExpr()
    {
        return this._lessThanExpr_;
    }

    public void setLessThanExpr(PLessThanExpr node)
    {
        if(this._lessThanExpr_ != null)
        {
            this._lessThanExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lessThanExpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._and_)
            + toString(this._lessThanExpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._and_ == child)
        {
            this._and_ = null;
            return;
        }

        if(this._lessThanExpr_ == child)
        {
            this._lessThanExpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._and_ == oldChild)
        {
            setAnd((TAnd) newChild);
            return;
        }

        if(this._lessThanExpr_ == oldChild)
        {
            setLessThanExpr((PLessThanExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
