/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.kth.badgers.lexparse.node;

import se.kth.badgers.lexparse.analysis.*;

@SuppressWarnings("nls")
public final class AArrayAssignStmt extends PStmt
{
    private TId _id_;
    private TLBracket _lBracket_;
    private PExpr _index_;
    private TRBracket _rBracket_;
    private TAssign _assign_;
    private PExpr _value_;
    private TSemiColon _semiColon_;

    public AArrayAssignStmt()
    {
        // Constructor
    }

    public AArrayAssignStmt(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TLBracket _lBracket_,
        @SuppressWarnings("hiding") PExpr _index_,
        @SuppressWarnings("hiding") TRBracket _rBracket_,
        @SuppressWarnings("hiding") TAssign _assign_,
        @SuppressWarnings("hiding") PExpr _value_,
        @SuppressWarnings("hiding") TSemiColon _semiColon_)
    {
        // Constructor
        setId(_id_);

        setLBracket(_lBracket_);

        setIndex(_index_);

        setRBracket(_rBracket_);

        setAssign(_assign_);

        setValue(_value_);

        setSemiColon(_semiColon_);

    }

    @Override
    public Object clone()
    {
        return new AArrayAssignStmt(
            cloneNode(this._id_),
            cloneNode(this._lBracket_),
            cloneNode(this._index_),
            cloneNode(this._rBracket_),
            cloneNode(this._assign_),
            cloneNode(this._value_),
            cloneNode(this._semiColon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayAssignStmt(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TLBracket getLBracket()
    {
        return this._lBracket_;
    }

    public void setLBracket(TLBracket node)
    {
        if(this._lBracket_ != null)
        {
            this._lBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBracket_ = node;
    }

    public PExpr getIndex()
    {
        return this._index_;
    }

    public void setIndex(PExpr node)
    {
        if(this._index_ != null)
        {
            this._index_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._index_ = node;
    }

    public TRBracket getRBracket()
    {
        return this._rBracket_;
    }

    public void setRBracket(TRBracket node)
    {
        if(this._rBracket_ != null)
        {
            this._rBracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBracket_ = node;
    }

    public TAssign getAssign()
    {
        return this._assign_;
    }

    public void setAssign(TAssign node)
    {
        if(this._assign_ != null)
        {
            this._assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assign_ = node;
    }

    public PExpr getValue()
    {
        return this._value_;
    }

    public void setValue(PExpr node)
    {
        if(this._value_ != null)
        {
            this._value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._value_ = node;
    }

    public TSemiColon getSemiColon()
    {
        return this._semiColon_;
    }

    public void setSemiColon(TSemiColon node)
    {
        if(this._semiColon_ != null)
        {
            this._semiColon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semiColon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._lBracket_)
            + toString(this._index_)
            + toString(this._rBracket_)
            + toString(this._assign_)
            + toString(this._value_)
            + toString(this._semiColon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._lBracket_ == child)
        {
            this._lBracket_ = null;
            return;
        }

        if(this._index_ == child)
        {
            this._index_ = null;
            return;
        }

        if(this._rBracket_ == child)
        {
            this._rBracket_ = null;
            return;
        }

        if(this._assign_ == child)
        {
            this._assign_ = null;
            return;
        }

        if(this._value_ == child)
        {
            this._value_ = null;
            return;
        }

        if(this._semiColon_ == child)
        {
            this._semiColon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._lBracket_ == oldChild)
        {
            setLBracket((TLBracket) newChild);
            return;
        }

        if(this._index_ == oldChild)
        {
            setIndex((PExpr) newChild);
            return;
        }

        if(this._rBracket_ == oldChild)
        {
            setRBracket((TRBracket) newChild);
            return;
        }

        if(this._assign_ == oldChild)
        {
            setAssign((TAssign) newChild);
            return;
        }

        if(this._value_ == oldChild)
        {
            setValue((PExpr) newChild);
            return;
        }

        if(this._semiColon_ == oldChild)
        {
            setSemiColon((TSemiColon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
