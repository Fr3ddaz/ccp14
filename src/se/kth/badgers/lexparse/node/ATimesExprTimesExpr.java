/* This file was generated by SableCC (http://www.sablecc.org/). */

package se.kth.badgers.lexparse.node;

import java.util.*;
import se.kth.badgers.lexparse.analysis.*;

@SuppressWarnings("nls")
public final class ATimesExprTimesExpr extends PTimesExpr
{
    private PPrefixExpr _prefixExpr_;
    private final LinkedList<PTimesExprRest> _timesExprRest_ = new LinkedList<PTimesExprRest>();

    public ATimesExprTimesExpr()
    {
        // Constructor
    }

    public ATimesExprTimesExpr(
        @SuppressWarnings("hiding") PPrefixExpr _prefixExpr_,
        @SuppressWarnings("hiding") List<?> _timesExprRest_)
    {
        // Constructor
        setPrefixExpr(_prefixExpr_);

        setTimesExprRest(_timesExprRest_);

    }

    @Override
    public Object clone()
    {
        return new ATimesExprTimesExpr(
            cloneNode(this._prefixExpr_),
            cloneList(this._timesExprRest_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATimesExprTimesExpr(this);
    }

    public PPrefixExpr getPrefixExpr()
    {
        return this._prefixExpr_;
    }

    public void setPrefixExpr(PPrefixExpr node)
    {
        if(this._prefixExpr_ != null)
        {
            this._prefixExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._prefixExpr_ = node;
    }

    public LinkedList<PTimesExprRest> getTimesExprRest()
    {
        return this._timesExprRest_;
    }

    public void setTimesExprRest(List<?> list)
    {
        for(PTimesExprRest e : this._timesExprRest_)
        {
            e.parent(null);
        }
        this._timesExprRest_.clear();

        for(Object obj_e : list)
        {
            PTimesExprRest e = (PTimesExprRest) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._timesExprRest_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._prefixExpr_)
            + toString(this._timesExprRest_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._prefixExpr_ == child)
        {
            this._prefixExpr_ = null;
            return;
        }

        if(this._timesExprRest_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._prefixExpr_ == oldChild)
        {
            setPrefixExpr((PPrefixExpr) newChild);
            return;
        }

        for(ListIterator<PTimesExprRest> i = this._timesExprRest_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTimesExprRest) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
