Package se.kth.badgers.lexparse;

Helpers

 letter = (['A' .. 'Z'] | ['a' .. 'z']);
 digit = ['0' .. '9'];
 space = ' ';
 horizontal_tab = 0x9;
 
 star = '*';
 slash = '/';
 
 l_comment = slash star;
 general_comment = slash slash;
 
 line_feed = 0xa;
 carriage_return = 0xd;
 
 input_character = [0 .. 0x7f];
 character = [input_character - [line_feed + carriage_return]];
 not_star = [character - star];
 not_star_nor_slash = [character - [star + slash]];

 line_terminator = (line_feed | carriage_return | line_feed carriage_return);

Tokens

 /*Key words*/
 
 class_token = 'class';
 public = 'public';
 static = 'static';
 void = 'void';
 return = 'return';
 if = 'if';
 else = 'else';
 while = 'while';
 println = 'System.out.println';
 this = 'this';
 new = 'new';
 true = 'true';
 false = 'false';
 
 /*Data types*/
 
 string = 'String';
 int = 'int';
 boolean = 'boolean';
 number = digit+;
 
 /*Operators*/
 
 plus = '+';
 minus = '-';
 star = star;
 mod = '%';
 and = '&&';
 less_than = '<';
 logical_not = '!';
 
 /*Special symbols*/
 
 l_par = '(';
 r_par = ')'; 
 l_bracket = '[';
 r_bracket = ']';
 l_brace = 0x7b;
 r_brace = 0x7d;
 dot = '.';
 comma = ',';
 semi_colon = ';';
 assign = '=';

 blank = (space | horizontal_tab | line_feed | carriage_return)*;
 star_comment = l_comment star* (not_star_nor_slash not_star* star+)* '/';
 line_comment = general_comment character* line_terminator?;

 /*Identifiers & literals*/
 id = letter (letter|digit)*;
 int_literal = ('0' | ['1' .. '9'] digit*);
 long_literal = ('0' ('l' | 'L') | ['1'..'9'] digit*);
 

Ignored Tokens
 blank, star_comment, line_comment;


Productions
 program = main_class class_decl*;
 main_class = class_token id l_brace main_method_decl main_method_body r_brace;
 main_method_decl = public static void [main]:id l_par string l_bracket r_bracket [args]:id r_par;
 main_method_body = l_brace var_decl* stmt* r_brace;
 class_decl = class_token id l_brace var_decl* method_decl* r_brace;
 var_decl = type id semi_colon;
 method_decl = public type id l_par arg_list r_par l_brace var_decl* stmt* return expr semi_colon r_brace;
 
 arg = type id;
 arg_list = {single} arg | {sequence} arg_list_rest*;
 arg_list_rest = comma arg;
	
 type = {int_array} int l_bracket r_bracket | {boolean} boolean |{int} int |{class} id;
	
 stmt = {body} l_brace stmt* r_brace 
 |{if} if l_par expr r_par [then]:stmt else [else_body]:stmt 
 |{while} while l_par expr r_par stmt
 |{println} println l_par expr r_par semi_colon 
 |{assign} id assign expr semi_colon 
 |{array_assign} id l_bracket [index]:expr r_bracket assign [value]:expr semi_colon;
	
 expr = {op_expr} [left]:expr op [right]:expr 
 |{array_deref} id l_bracket expr r_bracket 
 |{array_length} expr dot [length]:id
 |{method_call} expr dot id l_par expr_list r_par 
 |{int_lit} int_literal 
 |{true} true 
 |{false} false 
 |{variable} id
 |{this} this 
 |{new_int_array} new int l_bracket expr r_bracket 
 |{new_expr} new id l_par r_par 
 |{logical_not} logical_not expr
 |{parens} l_par expr r_par;

 op = {and} and 
 |{less_than} less_than
 |{plus} plus 
 |{minus} minus 
 |{mult} star;
	
 expr_list = {single} expr?
 |{sequence} expr expr_rest*;
 expr_rest =  comma expr;
 
  

/*
Abstract Syntax Tree

    grammar = exp* ;

    exp = {plus}   [l]:exp [r]:exp
    | {minus}  [l]:exp [r]:exp
    | {mult}   [l]:exp [r]:exp
    | {number} number
    ;
*/